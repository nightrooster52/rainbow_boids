package {	import flash.geom.Point;	import flash.geom.ColorTransform;	import fl.motion.Color;	public class PlayerBoid extends Boid {		public var colorTransform:ColorTransform = new ColorTransform();		var redOffset:Number;		var blueOffset:Number;		var greenOffset:Number;		public function PlayerBoid(master:BoidController, hue:Number) {			super(master , hue);			this.mass = 30;			this.currentSpeed = 1;			this.scaleX = 2;			this.scaleY = 2;			maxSpeed = 3;			redOffset = red(hue);			blueOffset = blue(hue);			greenOffset = green(hue);			var ct:ColorTransform = new ColorTransform(1, 1, 1, 1, redOffset, greenOffset, blueOffset, 0);			this.transform.colorTransform = ct;		}		public function morph():void {			//trace("morph");			hue = Math.random()*360;			this.currentSpeed += 5;			redOffset = red(hue);			blueOffset = blue(hue);			greenOffset = green(hue);			var ct:ColorTransform = new ColorTransform(1, 1, 1, 1, redOffset, greenOffset, blueOffset, 0);			this.transform.colorTransform = ct;		}		public override function update():void {			currentVector.x += (stage.mouseX - this.x)/9;			currentVector.y += (stage.mouseY - this.y)/9;			currentSpeed = cartesianDistance(new Point(stage.mouseX,stage.mouseY),new Point(this.x,this.y)) / 9;			if (currentSpeed > maxSpeed) {				currentSpeed += (maxSpeed - currentSpeed)/1.1;			}			currentVector = normalizeVector(currentVector,currentSpeed);						for (var i:uint = 0; i < master.boidArray.length; i++) {				var otherBoid:Boid = master.boidArray[i];				var currentDistance:Number = cartesianDistance(new Point(this.x,this.y),new Point(otherBoid.x,otherBoid.y));				if (currentDistance < sightRange+otherBoid.personalSpace  && currentDistance != 0 ) {					if (diffDegrees(otherBoid.hue) > 90){						var nextVector:Point = normalizeVector(new Point(this.x - otherBoid.x, this.y - otherBoid.y), -20);						otherBoid.currentSpeed += 2;						otherBoid.currentVector.x += nextVector.x;						otherBoid.currentVector.y += nextVector.y;					}				}			}			this.x +=  currentVector.x;			this.y +=  currentVector.y;			this.rotation =  (-Math.atan2(currentVector.x,currentVector.y) * 57.2957795);		}				private function red(hue:Number):Number{			return 510 - 4.25*Math.abs(hue - 180);		}		private function green(hue:Number):Number{			if (hue > 180){				hue -= 360			}			return 510 - 4.25*Math.abs(hue - 60);		}		private function blue(hue:Number):Number{			if (hue < 180){				hue += 360			}			return 510 - 4.25*Math.abs(hue - 300);		}	}}